# Stubs for eliot._validation (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._action import ACTION_STATUS_FIELD, ACTION_TYPE_FIELD, FAILED_STATUS, STARTED_STATUS, SUCCEEDED_STATUS, startTask, start_action
from ._message import MESSAGE_TYPE_FIELD, Message, REASON_FIELD, TASK_LEVEL_FIELD, TASK_UUID_FIELD, TIMESTAMP_FIELD
from pyrsistent import PClass
from typing import Any, Optional

unicode: Any

class ValidationError(Exception): ...

RESERVED_FIELDS: Any

class Field:
    key: Any = ...
    description: Any = ...
    def __init__(self, key: Any, serializer: Any, description: str = ..., extraValidator: Optional[Any] = ...) -> None: ...
    def validate(self, input: Any) -> None: ...
    def serialize(self, input: Any): ...
    @classmethod
    def forValue(klass: Any, key: Any, value: Any, description: Any): ...
    for_value: Any = ...
    @classmethod
    def forTypes(klass: Any, key: Any, classes: Any, description: Any, extraValidator: Optional[Any] = ...): ...
    for_types: Any = ...

def fields(*fields: Any, **keys: Any): ...

REASON: Any
TRACEBACK: Any
EXCEPTION: Any

class _MessageSerializer:
    fields: Any = ...
    allow_additional_fields: Any = ...
    def __init__(self, fields: Any, allow_additional_fields: bool = ...) -> None: ...
    def serialize(self, message: Any) -> None: ...
    def validate(self, message: Any) -> None: ...

class MessageType:
    message_type: Any = ...
    description: Any = ...
    def __init__(self, message_type: Any, fields: Any, description: str = ...) -> None: ...
    def __call__(self, **fields: Any): ...
    def log(self, **fields: Any) -> None: ...

class _ActionSerializers(PClass):
    start: Any = ...
    success: Any = ...
    failure: Any = ...

class ActionType:
    action_type: Any = ...
    description: Any = ...
    def __init__(self, action_type: Any, startFields: Any, successFields: Any, description: str = ...) -> None: ...
    def __call__(self, logger: Optional[Any] = ..., **fields: Any): ...
    def as_task(self, logger: Optional[Any] = ..., **fields: Any): ...
    asTask: Any = ...
