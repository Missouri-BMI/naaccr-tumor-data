/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'dconnolly' at '10/15/19 10:22 AM' with Gradle 2.13
 *
 * cribbed from https://stackoverflow.com/a/44803796
 */
plugins {
    id 'groovy'
    id 'idea'
}

repositories { mavenCentral() }

dependencies {
    compile 'org.codehaus.groovy:groovy:2.5.8'
    compile 'org.codehaus.groovy:groovy-json:2.5.8'
    compile 'org.codehaus.groovy:groovy-sql:2.5.8'
    compile 'com.imsweb:naaccr-xml:6.6'
    compile 'com.imsweb:layout:2.0'
    compile 'tech.tablesaw:tablesaw-core:0.37.2'
    // https://mvnrepository.com/artifact/com.h2database/h2/1.4.200
    compile 'com.h2database:h2:1.4.200'

    // https://mvnrepository.com/artifact/com.offbytwo/docopt
    compile group: 'com.offbytwo', name: 'docopt', version: '0.6.0.20150202'

    // i2b2 JDBC drivers
    // https://github.com/i2b2/i2b2-core-server/tree/master/edu.harvard.i2b2.server-common/lib/jdbc
    // mssql-jdbc-7.4.1.jre8.jar, ojdbc8.jar, postgresql-42.2.8.jar
    runtime 'com.oracle.ojdbc:ojdbc8:19.3.0.0'
    runtime 'org.postgresql:postgresql:42.2.8.jre7'
    runtime 'com.microsoft.sqlserver:mssql-jdbc:8.1.0.jre13-preview'

    testCompile 'junit:junit:4.12'
    testCompile 'org.codehaus.groovy:groovy-test:3.0.1'
}

class UsageDoc extends DefaultTask {
    @InputFile
    File readme = project.file('README.md')

    @OutputFile
    File doc = project.file('src/main/resources/usage.txt')

    @TaskAction
    void perform() {
        final usage = readme.text.split('```\n').find { it.startsWith('Usage:') }
        doc.text = usage
    }
}

task buildUsageDoc(type: UsageDoc) {
    group = 'documentation'
}
processResources.dependsOn buildUsageDoc

task fatjar(type: Jar) {
    group = 'build'

    manifest {
        attributes 'Main-Class': 'TumorFile'
    }
    from {
        configurations
            .runtime
            .collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar

    // avoid: Error: Could not find or load main class
    // https://stackoverflow.com/a/51456080
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

fatjar.dependsOn build

Properties db1() {
    Properties ps = new Properties()
    ps.putAll(["db.url"   : "jdbc:h2:file:${System.getProperty('user.dir')}/DB1;create=true".toString(),
               "db.driver": 'org.h2.Driver',
               "db.user"  : 'SA', "db.password": ''])
    ps
}

task localDBStatsTest(type: Exec) {
    description = 'Integration tests: stats on 100 records of test data with local disk h2 DB.'
    group = 'verification'

    db1().store(new File('db.properties').newWriter(), null)

    commandLine 'java', '-jar', 'build/libs/naaccr-tumor-data.jar', 'summary', '--flat-file', 'naaccr_xml_samples/naaccr-xml-sample-v180-incidence-100.txt'
}

task localDBTumorsTest(type: Exec) {
    description = 'Integration tests: visits from 100 records of test data with local disk h2 DB.'
    group = 'verification'

    db1().store(new File('db.properties').newWriter(), null)

    commandLine 'java', '-jar', 'build/libs/naaccr-tumor-data.jar', 'tumors', '--flat-file', 'naaccr_xml_samples/naaccr-xml-sample-v180-incidence-100.txt'
}

task localDBFactsTest(type: Exec) {
    description = 'Integration tests: facts from 100 records of test data with local disk h2 DB.'
    group = 'verification'

    db1().store(new File('db.properties').newWriter(), null)

    commandLine 'java', '-jar', 'build/libs/naaccr-tumor-data.jar', 'facts', '--flat-file', 'naaccr_xml_samples/naaccr-xml-sample-v180-incidence-100.txt'
}
localDBFactsTest.dependsOn fatjar

// TODO: check.dependsOn integrationTest
